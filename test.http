### 환경
#@base = http://localhost:8080/api
@base = https://test-crud-gyf8cndnaeaxgea2.koreacentral-01.azurewebsites.net/api
@sessionId = 11111111
@teacherId = 22222222

### 1) 시험 생성
POST {{base}}/exams
Content-Type: application/json

{
  "sessionId": {{sessionId}},
  "name": "네트워크 기초 퀴즈(HTTP)",
  "difficulty": "EASY",
  "isReady": false,
  "createdBy": {{teacherId}}
}

> {%
    const ct = (response.headers['content-type'] || '').toLowerCase();
    let obj = undefined;
    try {
        obj = (ct.includes('application/json') && response.parsedBody)
            ? response.parsedBody
            : (typeof response.body === 'string' ? JSON.parse(response.body) : response.body);
    } catch (e) { /* ignore */ }
    if (!obj || !obj.id) {
        client.log('POST /exams 응답을 JSON으로 파싱하지 못함');
        client.log('status = ' + response.status);
        client.log('content-type = ' + response.headers['content-type']);
        client.log('body = ' + response.body);
        throw new Error('examId를 추출할 수 없습니다. 응답이 JSON인지 확인하세요.');
    }
    client.global.set('examId', obj.id);
%}

### 2) 생성된 시험 상세 조회
GET {{base}}/exams/{{examId}}

### 3) 특정 세션/난이도 목록 조회
GET {{base}}/exams?sessionId={{sessionId}}&difficulty=EASY

### 4) 문항 추가 (객관식)
POST {{base}}/exams/{{examId}}/questions
Content-Type: application/json

{
  "qtype": "MCQ",
  "body": "전송계층의 대표 프로토콜은?",
  "choices": "[\"TCP\", \"IP\", \"ARP\", \"ICMP\"]",
  "answerKey": "TCP",
  "points": 5,
  "position": 1
}

> {%
    const ct = (response.headers['content-type'] || '').toLowerCase();
    let obj = undefined;
    try {
        obj = (ct.includes('application/json') && response.parsedBody)
            ? response.parsedBody
            : (typeof response.body === 'string' ? JSON.parse(response.body) : response.body);
    } catch (e) { /* ignore */ }
    if (!obj || !obj.id) {
        client.log('POST /questions 응답을 JSON으로 파싱하지 못함');
        client.log('status = ' + response.status);
        client.log('content-type = ' + response.headers['content-type']);
        client.log('body = ' + response.body);
        throw new Error('q1 추출 실패');
    }
    client.global.set('q1', obj.id);
%}

### 5) 문항 추가 (단답식)
POST {{base}}/exams/{{examId}}/questions
Content-Type: application/json

{
  "qtype": "SHORT",
  "body": "TCP의 handshake 단계 수는?",
  "answerKey": "3",
  "points": 5,
  "position": 2
}

> {%
    const ct = (response.headers['content-type'] || '').toLowerCase();
    let obj = undefined;
    try {
        obj = (ct.includes('application/json') && response.parsedBody)
            ? response.parsedBody
            : (typeof response.body === 'string' ? JSON.parse(response.body) : response.body);
    } catch (e) { /* ignore */ }
    if (!obj || !obj.id) {
        client.log('POST /questions 응답을 JSON으로 파싱하지 못함');
        client.log('status = ' + response.status);
        client.log('content-type = ' + response.headers['content-type']);
        client.log('body = ' + response.body);
        throw new Error('q2 추출 실패');
    }
    client.global.set('q2', obj.id);
%}

### 6) 문항 목록 조회 (position 오름차순)
GET {{base}}/exams/{{examId}}/questions

### 7) 시험 수정 (이름/난이도/준비상태 변경)
PATCH {{base}}/exams/{{examId}}
Content-Type: application/json

{
  "name": "네트워크 기초 퀴즈 - 수정",
  "difficulty": "MEDIUM",
  "isReady": true
}

### 7-1) 시험 준비 상태만 변경
PATCH {{base}}/exams/{{examId}}/ready?isReady=true

### 7-2) 시험 준비 상태 해제
PATCH {{base}}/exams/{{examId}}/ready?isReady=false

### 8) 문항 수정 (본문/정답/순서 변경)
PATCH {{base}}/questions/{{q1}}
Content-Type: application/json

{
  "body": "전송계층 프로토콜을 고르시오",
  "answerKey": "TCP",
  "position": 3
}

### 9) 문항 삭제
DELETE {{base}}/questions/{{q2}}

### 10) 시험 삭제
DELETE {{base}}/exams/{{examId}}

### test1
GET {{base}}/exams?sessionId={{sessionId}}